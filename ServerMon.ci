//--------------------------------------------------------------------------------
//	Copyright © 2015 Schneider Electric (Australia) Pty Ltd. All rights reserved.
//
// 	FILE:		ServerMon.ci
//
//	CREATED:	18/08/2009
//
//	SUMMARY:
//
//		Contains functions used by the Server Monitoring Genies.
//
//	PUBLIC FUNCTIONS:
//
//		ServerMonAllState
//		ServerMonAllStateLabel
//
//		ServerMonCluster
//		ServerMonClusterCount
//		ServerMonClusterSelect
//		ServerMonClusterSelected
//		ServerMonClusterState
//		ServerMonClusterStateLabel
//		ServerMonClusterActive
//
//		ServerMonPgFirstCluster
//		ServerMonPgFirstIo
//		ServerMonPgLastCluster
//		ServerMonPgLastIo
//
//		ServerMonScrollCluster
//		ServerMonScrollIo
//
//		ServerMonServerCount
//		ServerMonServerName
//		ServerMonServerOnline
//		ServerMonServerStatus

//		ServerMonPropertyPageClose
//		ServerMonPropertyPagePopup
//
// 	REMARKS: 
//
//	USAGE:
//
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
//
//	Constants
//
//-----------------------------------------------------------------------------

INT 		c_MAX_CLUSTER_COUNT		= 	128;
INT 		c_MAX_CLUSTER_ON_PAGE	= 	20;
INT 		c_MAX_IO_SERVER_COUNT	= 	249;
INT 		c_MAX_IO_ON_PAGE		= 	8;

INT			c_RAT_SERVER_INDEX_SLOT	=	6;	// 6 = 2 * 3
INT			c_IO_SERVER_BASE_INDEX	=	6;	// 6 = c_RAT_SERVER_INDEX_SLOT

INT			c_Monitor_Sacn_Interval	=	1000;

// Server Type Identifiers CITECT_RUN_MODE_*
// --------------------------
INT 		c_SERVER_TYPE_REPORT	=	0;
INT 		c_SERVER_TYPE_ALARM		=	1;
INT 		c_SERVER_TYPE_TREND		=	2;
INT 		c_SERVER_TYPE_IO		=	3;

STRING 		c_clusterLabel[5]	=	"@(all offline)", "@(some online)", "@(all online)", "@(inactive)", "@(error)";
STRING 		c_serverLabel[2]	=	"@(offline)", "@(online)";

//-----------------------------------------------------------------------------
//
//	Global variables
//
//-----------------------------------------------------------------------------
INT 		m_clusterCount 		= 0;	// total number of clusters discovered
INT			m_clusterActive 	= 0;	// cluster at selection

INT			m_pageStartCluster	= 0;	// cluster listbox starting offset 
INT			m_pageStartIo 		= 0;	// I/O server listbox starting offset 

STRING 		m_clusterName[128];			// 128 = c_MAX_CLUSTER_COUNT
STRING 		m_clusterOnline[128];		// String coded cluster and server status:
										//
										// Format: "CrrTTaaI..."
										//
										// Or in words:
										//
										// 0 FOR cluster, multi-state: 0,1,2,3 
										//  (refer ServerMonClusterState() for state info
										//
										// 1-2 Repor, multi-state ' ' for not present, 
										//				0 OR 1, offline/online
										// 3-4 trend, multi-state ' ' for not present, 
										//				0 OR 1, offline/online
										// 5-6 alarm, multi-state ' ' for not present, 
										//				0 OR 1, offline/online
										//
										// 7-N ... I/O, binary 0 or 1

STRING 		m_serverName[255];			// 3 (report, trend, alarm) pairs of servers,
										// plus maxmimum 249 I/O servers on each
										// cluster

INT			hServerProperty = -1;		// Server property popup window handle

//-----------------------------------------------------------------------------
//
//	Public Functions
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonAllState
//
//	SUMMARY:
//		Check if all the configured servers of the site/project are online
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		3	- if none of the cluster is active
//		2	- if all the servers are online
//		1	- if some servers are online
//		0	- if no server in the site is online
//
//	REMARKS:
//		If a cluster is inactive, it is always done by choice (either via INI or ClusterDeactivate cicode),
//		therefore a inactive cluster will be ignored in contributing to the overall status of
//		a site unless all configured clusters are inactive which makes the overall status be inactive.
//
//-----------------------------------------------------------------------------
INT FUNCTION ServerMonAllState()
	INT		i;
	INT		nOffline = 0;
	INT		nDisconnect = 0;
	INT		nSomeOnline = 0;
	INT		nError = 0;
	STRING	sOnline;
	_ServerMonInit();
	
	// reset server names
	FOR i = 0 TO m_clusterCount - 1 DO
		sOnline = m_clusterOnline[i];
		// check for cluster without any online server
		SELECT CASE StrLeft(sOnline, 1)
		CASE "0"
			// no good if any cluster has an offline server
			nOffline = nOffline + 1;
		CASE "1"
			// only some servers are online
			nSomeOnline = nSomeOnline + 1;
		CASE "3"
			// cluster not active
			nDisconnect = nDisconnect + 1;
		CASE "4"
			// cluster cannot be browsed
			nError = nError + 1;
		END	SELECT
	END

	IF nDisconnect = m_clusterCount THEN
		// none of the clusters is active
		RETURN 3;
	END

	IF nError = m_clusterCount - nDisconnect THEN
		// none of the active clusters can be browsed
		RETURN 4;
	END

	IF nOffline + nError = m_clusterCount - nDisconnect THEN
		// bad, all active clusters offline
		RETURN 0;
	ELSE IF (nOffline = 0) AND (nSomeOnline = 0) AND (nError = 0) THEN
		// good, all active clusters online
		RETURN 2;
	ELSE
		// only some active clusters online
		RETURN 1;
	END END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonAllStateLabel
//
//	SUMMARY:
//		Provide text label for site/project state.
//
//	PARAMS:
//
//	RETURNS: 
//
//		s	- the text string describing the state of cluster
//
//	REMARKS:
//
//-----------------------------------------------------------------------------

STRING FUNCTION ServerMonAllStateLabel()
	INT		state = ServerMonAllState();
	// state definition is the same for cluster and over all
	RETURN	c_clusterLabel[state];
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonCluster
//
//	SUMMARY:
//		Retrieve name of the addressed cluster.
//
//	PARAMS:
//
//		index		- index in the cluster list
//
//	RETURNS: 
//
//		name string of the cluster
//
//-----------------------------------------------------------------------------
STRING FUNCTION ServerMonCluster(INT index)
	_ServerMonInit();
	RETURN m_clusterName[m_pageStartCluster + index];
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonClusterCount
//
//	SUMMARY:
//		Total number of clusters in the site.
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		number of clusters in the site project
//
//-----------------------------------------------------------------------------
INT FUNCTION ServerMonClusterCount()
	_ServerMonInit();
	RETURN m_clusterCount;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonClusterSelect
//
//	SUMMARY:
//		Event handler for cluster select operation
//
//	PARAMS:
//
//		index	- index in the cluster list, [0, c_MAX_CLUSTER_ON_PAGE-1]
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
FUNCTION ServerMonClusterSelect(INT index)
	STRING	clusterIndex = IntToStr(index);
	INT		i;
	INT		serverCount = ServerMonServerCount(c_SERVER_TYPE_IO) + c_RAT_SERVER_INDEX_SLOT;

	// reset server names
	FOR i = 0 TO serverCount - 1 DO
		m_serverName[i] = "";
	END;
	
	// set cluster array index of current cluster
	m_clusterActive = m_pageStartCluster + index;

	// set listbox index of current I/O server
	m_pageStartIo = 0;
	
	TaskNew("_ServerMonScanClusterForServerNames", "", 8 + 2);
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonClusterSelected
//
//	SUMMARY:
//		Checking if the given cluster is currently selected.
//
//	PARAMS:
//
//		index		- index in the cluster list
//
//	RETURNS: 
//
//		1	- if the given indexed cluster is seleted
//		0	- if the given indexed cluster is not selecte
//
//	REMARKS:
//
//-----------------------------------------------------------------------------

INT FUNCTION ServerMonClusterSelected(INT index)
	IF (index + m_pageStartCluster) = m_clusterActive THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonClusterState
//
//	SUMMARY:
//		Checking if all servers of the cluster is online.
//
//	PARAMS:
//
//		index		- index in the cluster listbox
//
//	RETURNS: 
//
//		4	- if the cluster can not be browsed
//		3	- if the cluster is not active
//		2	- if all servers are online
//		1	- if some servers are online
//		0	- if no server in the cluster is online
//
//	REMARKS:
//
//-----------------------------------------------------------------------------

INT FUNCTION ServerMonClusterState(INT index)
	STRING	sOnline = m_clusterOnline[m_pageStartCluster + index];
	STRING	rCode = StrLeft(sOnline, 1);
	RETURN	StrToInt(rCode);
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonClusterStateLabel
//
//	SUMMARY:
//		Provide text label for cluster state.
//
//	PARAMS:
//
//		index		- index in the cluster listbox
//
//	RETURNS: 
//
//		s	- the text string describing the state of cluster
//
//	REMARKS:
//
//-----------------------------------------------------------------------------

STRING FUNCTION ServerMonClusterStateLabel(INT index)
	INT		state = ServerMonClusterState(index);
	RETURN	c_clusterLabel[state];
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonClusterActive
//
//	SUMMARY:
//		Return the name of the cluster that is actively selected for display.
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		s	- the active cluster name
//
//	REMARKS:
//
//-----------------------------------------------------------------------------

STRING FUNCTION ServerMonClusterActive()
	IF (m_clusterActive > -1) THEN
		RETURN m_clusterName[m_clusterActive];
	END
	RETURN "";
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonServerCount
//
//	SUMMARY:
//		Count the number of servers of the given type in the active cluster
//
//	PARAMS:
//
//		serverType	- Type of the server, alarm, trend, report, io
//						ref #define	CITECT_RUN_MODE_*
//		
//	RETURNS: 
//		number of servers
//
//	REMARKS:
//
//-----------------------------------------------------------------------------

INT FUNCTION ServerMonServerCount(INT serverType)
	STRING	sClusterOverview;
	STRING	sStateCode;
	INT		serverCount = 0;
	_ServerMonInit();

	sClusterOverview = m_clusterOnline[m_clusterActive];
	IF serverType = c_SERVER_TYPE_IO THEN
		RETURN StrLength(sClusterOverview) - c_RAT_SERVER_INDEX_SLOT - 1;
	END

	sStateCode = StrMid(sClusterOverview, serverType * 2 + 1, 2);
	// get the two charactor server coding out of the string,
	// for example: 	" 0" for no standby and offline primary
	//					"1 " for online standby but no primary, or
	//					"00" for both standby & primary offline etc.

	IF StrLeft(sStateCode, 1) <> " " THEN
		serverCount = serverCount + 1;
	END;

	IF StrRight(sStateCode, 1) <> " " THEN
		serverCount = serverCount + 1;
	END;

	RETURN serverCount;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonServerName
//
//	SUMMARY:
//		Displays a Process Analyst page (in the same window) preloaded with 
//		the pre-defined Process Analyst View (PAV) file.
//
//	PARAMS:
//
//		serverType	- Type of the server, alarm, trend, report, io
//						ref #define	CITECT_RUN_MODE_*
//		
//		index		- serial number of the server of this type, 
//						FOR I/O servers, it is the sequential number in the project
//						FOR non-I/O servers, 0 is standby, 1 is primary
//		
//	RETURNS: 
//		The name of the server
//
//	REMARKS:
//
//-----------------------------------------------------------------------------

STRING FUNCTION ServerMonServerName(INT serverType, INT index)

	SELECT CASE serverType
	CASE  c_SERVER_TYPE_IO
		// I/O server
		RETURN m_serverName[c_RAT_SERVER_INDEX_SLOT + index + m_pageStartIo];
	CASE c_SERVER_TYPE_REPORT TO c_SERVER_TYPE_TREND
		// Report, Trend, Alarm Server
		RETURN m_serverName[serverType * 2 + index];
	CASE ELSE
		RETURN "";
	END SELECT
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonServerOnline
//
//	SUMMARY:
//		Checking if the addressed server is online.
//
//	PARAMS:
//
//		serverType	- Type of the server, alarm, trend, report, io
//						ref #define	CITECT_RUN_MODE_*
//		
//		index		- serial number of the server of this type
//						Please see the parameter description in ServerMonServerName()
//						for details
//
//	RETURNS: 
//
//		1	- if the all servers are online
//		0	- if any server in the cluster is offline
//
//	REMARKS:
//
//-----------------------------------------------------------------------------
INT FUNCTION ServerMonServerOnline(INT serverType, INT index)
	STRING	sOnline = m_clusterOnline[m_clusterActive];
	
	IF StrMid(sOnline, serverType * 2 + index + 1, 1) = "1" THEN
		RETURN 1;
	END
	RETURN 0;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonServerStatus
//
//	SUMMARY:
//		Return server online status text string
//
//	PARAMS:
//
//		serverType	- Type of the server, alarm, trend, report, io
//						ref #define	CITECT_RUN_MODE_*
//		
//		index		- index in the server listbox
//
//	RETURNS: 
//
//		servers online status text string
//
//	REMARKS:
//
//-----------------------------------------------------------------------------
STRING FUNCTION ServerMonServerStatus(INT serverType, INT index)
	INT	nOnline = ServerMonServerOnline(serverType, index);
	RETURN c_serverLabel[nOnline];
END


//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonScrollCluster
//
//	SUMMARY:
//		Scrolling the cluster listnbox by the given offset
//
//	PARAMS:
//
//		cmdCode	- which is either positive (for down), or negative (UP)
//					-1, 1 for one item
//					-2, 2 for one page
//					-3, 3 for home or end
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
FUNCTION ServerMonScrollCluster(INT cmdCode)
	INT		refreshRequired = 1;
	SELECT CASE cmdCode
	CASE -3
		// scroll to home/begin
		m_pageStartCluster = 0;
	CASE 3
		// scroll to end
		m_pageStartCluster = m_clusterCount - c_MAX_CLUSTER_ON_PAGE;
	CASE -2
		// scroll page up
		m_pageStartCluster = Max(0, m_pageStartCluster - c_MAX_CLUSTER_ON_PAGE);
	CASE 2
		// scroll page down
		m_pageStartCluster = Min(m_clusterCount - c_MAX_CLUSTER_ON_PAGE, m_pageStartCluster + c_MAX_CLUSTER_ON_PAGE)
	CASE -1
		// scroll one item up
		m_pageStartCluster = Max(0, m_pageStartCluster - 1);
		IF (m_clusterActive < (m_pageStartCluster + c_MAX_CLUSTER_ON_PAGE)) THEN
			// previous select cluster still in the view
			refreshRequired = 0;
		END
	CASE 1
		// scroll one item down
		m_pageStartCluster = Min(m_clusterCount - 1, m_pageStartCluster + 1);
		IF (m_clusterActive >= m_pageStartCluster) THEN
			// previous select cluster still in the view
			refreshRequired = 0;
		END
	END SELECT
	
	IF refreshRequired THEN
		ServerMonClusterSelect(0);
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonScrollIo
//
//	SUMMARY:
//		Scrolling the I/O server listnbox by the given offset
//
//	PARAMS:
//
//		cmdCode	- which is either positive (for down), or negative (UP)
//					-1, 1 for one item
//					-2, 2 for one page
//					-3, 3 for home or end
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
FUNCTION ServerMonScrollIo(INT cmdCode)
	INT ioServerCount = ServerMonServerCount(c_SERVER_TYPE_IO);

	SELECT CASE cmdCode
	CASE -3
		// scroll to home/begin
		m_pageStartIo = 0;
	CASE 3
		// scroll to end
		m_pageStartIo = ioServerCount - c_MAX_IO_ON_PAGE;
	CASE -2
		// scroll page up
		m_pageStartIo = Max(0, m_pageStartIo - c_MAX_IO_ON_PAGE);
	CASE 2
		// scroll page down
		m_pageStartIo = Min(ioServerCount - c_MAX_IO_ON_PAGE, m_pageStartIo + c_MAX_IO_ON_PAGE)
	CASE -1
		// scroll one item up
		m_pageStartIo = Max(0, m_pageStartIo - 1);
	CASE 1
		// scroll one item up
		m_pageStartIo = Min(ioServerCount - 1, m_pageStartIo + 1);
	END SELECT
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonPgFirstCluster
//
//	SUMMARY:
//		Check if the cluster listbox is on the 1st page what implies
//		it is impossible to scroll back
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		1	- yes, the listbox is on page 1
//		0	- no, the listbox is not on page 1
//
//-----------------------------------------------------------------------------
INT FUNCTION ServerMonPgFirstCluster()
	IF m_pageStartCluster = 0 THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonPgFirstIo
//
//	SUMMARY:
//		Check if the I/O server listbox is on the 1st page what implies
//		it is impossible to scroll back
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		1	- yes, the listbox is on page 1
//		0	- no, the listbox is not on page 1
//
//-----------------------------------------------------------------------------
INT FUNCTION ServerMonPgFirstIo()
	IF m_pageStartIo = 0 THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonPgLastCluster
//
//	SUMMARY:
//		Check if the cluster listbox is on the last page what implies
//		it is impossible to scroll back
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		1	- yes, the listbox is on page 1
//		0	- no, the listbox is not on page 1
//
//-----------------------------------------------------------------------------
INT FUNCTION ServerMonPgLastCluster()
	IF (m_clusterCount - m_pageStartCluster) <= c_MAX_CLUSTER_ON_PAGE THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonPgLastIo
//
//	SUMMARY:
//		Check if the I/O server listbox is on the last page what implies
//		it is impossible to scroll back
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		1	- yes, the listbox is on page 1
//		0	- no, the listbox is not on page 1
//
//-----------------------------------------------------------------------------
INT FUNCTION ServerMonPgLastIo()
	INT ioServerCount = ServerMonServerCount(c_SERVER_TYPE_IO);
	IF (ioServerCount - m_pageStartIo) <= c_MAX_IO_ON_PAGE THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonPropertyPageClose
//
//	SUMMARY:
//		Reset the popup window handle for server properties
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
FUNCTION ServerMonPropertyPageClose()
	hServerProperty = -1;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		ServerMonPropertyPagePopup
//
//	SUMMARY:
//		Popup the server properties page
//
//	PARAMS:
//
//		server		- server name
//
//		serverType	- Type of the server: alarm, trend, report
//						ref #define	CITECT_RUN_MODE_*
//
//		cluster		- cluster name, if not specified, it assumes current cluster
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
FUNCTION ServerMonPropertyPagePopup(STRING server, INT serverType, STRING cluster = "")
	INT winNumberOld = WinNumber();

	IF server <> "" THEN
	 	IF -1 = hServerProperty THEN
			PagePopUp("!ServerProperties");
			hServerProperty = WinNumber();

			PageSetInt("type", serverType, hServerProperty);
			PageSetStr("cluster", cluster, hServerProperty);
			PageSetStr("server", server, hServerProperty);
			WinTitle("@(Server) : " + cluster + "." + server);

			TaskNew("_ServerMonPropertyPageUpdate","",1);
		ELSE
			WinSelect(hServerProperty);
			
			PageSetInt("type", serverType, hServerProperty);
			PageSetStr("cluster", cluster, hServerProperty);
			PageSetStr("server", server, hServerProperty);
			WinTitle("@(Server) : " + cluster + "." + server);
		END
	END

	WinSelect(winNumberOld);
END


//-----------------------------------------------------------------------------
//
//	Private Functions
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonCheckOnline
//
//	SUMMARY:
//		Check if the addressed server is online
//
//	PARAMS:
//
//		sName		- Name of the server
//		
//		sCluster	- Name of the cluster
//
//	RETURNS: 
//
//		1	- yes, the server is online
//		0	- no, the server is offline
//
//-----------------------------------------------------------------------------
PRIVATE
INT	FUNCTION _ServerMonCheckOnline(STRING sName, STRING sCluster)
	INT 	rc;
	INT		Error;
	
	ErrSet(1);
	
	rc = ServerIsOnline(sName, sCluster);
	Error = IsError(); // pick up any error
	ErrSet(0);

	RETURN rc;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonClusterAdd
//
//	SUMMARY:
//		Add a cluster to the cluster array
//
//	PARAMS:
//
//		sCluster	- Name of the cluster
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
PRIVATE
FUNCTION _ServerMonClusterAdd(STRING sCluster)
	INT i;
	FOR i = 0 TO m_clusterCount - 1 DO
		IF m_clusterName[i] = sCluster THEN
			// the cluster name is already in the list
			RETURN;
		END
	END

	IF m_clusterCount >= c_MAX_CLUSTER_COUNT THEN
		// overflow limit
		RETURN;
	END
	
	// A new cluster name is found
	m_clusterName[m_clusterCount] = sCluster;
	m_clusterCount = m_clusterCount + 1;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonInit
//
//	SUMMARY:
//		Initialize the server monitoring sub-system by launching
//		a site scan (server browsing) task
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
PRIVATE
FUNCTION _ServerMonInit()
	IF m_clusterCount < 1 THEN
		TaskNew("_ServerMonScanSite", "",  8 + 2);
	END

	// allow the window that returns server status to be closed and reopened
	IF TaskHnd("_ServerMonMonitor") < 0 THEN
		// launch the background process
		TaskNew("_ServerMonMonitor", "", 8 + 2);
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonScanClusterForServerNames
//
//	SUMMARY:
//		Browse the active cluster to retrieve server names in the cluster
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		N/A
//
//	REMARKS:
//		Background task, cannot be set to PRIVATE scope
//
//-----------------------------------------------------------------------------
FUNCTION _ServerMonScanClusterForServerNames()
	INT 	i;
	INT		numServers 	= 0;
	INT 	numIoServer	= 0;
	STRING 	sCluster 	= m_clusterName[m_clusterActive];
	INT 	handle 		= ServerBrowseOpen("", "", sCluster);

	IF (handle <> -1) THEN
		numServers = ServerBrowseNumRecords(handle);
	
		ServerBrowseFirst(handle);
		FOR i = 1 TO numServers DO
			// numIoServer may be ibcreased by 1 in the function we call
			numIoServer = _ServerMonServerAdd(handle, numIoServer);
			IF i < numServers THEN
				ServerBrowseNext(handle)
			END
		END
		ServerBrowseClose(handle);
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonScanServers
//
//	SUMMARY:
//		Browse the addressed cluster to retrieve server status
//
//	PARAMS:
//
//		clusterIdx	- index to the cluster array
//
//	RETURNS: 
//
//		coded string of cluster and server on/off line status,
//		for example "0010111011"
//
//		Pos	0	-	cluster, multi-state, value is in the range of "0"-"4"
//		Pos	1	-	standby report server
//		Pos	2	-	primary report server
//		Pos	3	-	standby trend server
//		Pos	4	-	primary trend server
//		Pos	5	-	standby alarm server
//		Pos	6	-	primary alarm server
//		Pos	7	-	1st I/O server
//		...
//
//-----------------------------------------------------------------------------
PRIVATE
STRING FUNCTION _ServerMonScanServers(INT clusterIdx)
	STRING 	sOnline = "3      ";	// assuming cluster not active, no servers

	INT 	i;
	INT		numServer;
	STRING 	sCluster 	= m_clusterName[clusterIdx];
	INT 	handle 		= ServerBrowseOpen("", "", sCluster);
	INT		statusIndex	= 0;
	STRING	sName 		= "";
	INT		serverOffline	= 0;
	
	IF (handle = -1) THEN
		// browsing not possible
		StrSetChar(sOnline, 0, 52);	// 52 = ASCII(4)
		RETURN sOnline;
	END
	
	numServer = ServerBrowseNumRecords(handle);
		
	ServerBrowseFirst(handle);
	FOR i = 1 TO numServer DO
		sName = ServerBrowseGetField(handle, "Name");
		statusIndex = _ServerMonStatusStringIndex(handle);		
		
		IF _ServerMonCheckOnline(sName, sCluster) THEN
			IF statusIndex = c_IO_SERVER_BASE_INDEX THEN
				// attach an online I/O server
				sOnline = sOnline + "1";
			ELSE
				// change state from ' ' to '1'
				StrSetChar(sOnline, statusIndex + 1, 49);
			END
		ELSE
			IF statusIndex = c_IO_SERVER_BASE_INDEX THEN
				// attach an offline I/O server
				sOnline = sOnline + "0";
			ELSE
				// change state from ' ' to '0'
				StrSetChar(sOnline, statusIndex + 1, 48);
			END
			serverOffline = serverOffline + 1;
		END

		IF i < numServer THEN
			ServerBrowseNext(handle)
		END
	END
		
	ServerBrowseClose(handle);

	IF ClusterIsActive(sCluster) THEN
		// cluster is actively connected
		SELECT CASE serverOffline
		CASE numServer
			// all offline
			StrSetChar(sOnline, 0, 48);
		CASE 0
			// none offline
			StrSetChar(sOnline, 0, 50);
		CASE ELSE
			// some offline
			StrSetChar(sOnline, 0, 49);
		END SELECT
	END
		
	RETURN sOnline;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonMonitor
//
//	SUMMARY:
//		Making snapshot of online status of the site
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		N/A
//
//	REMARKS:
//		Background task, cannot be set to PRIVATE scope
//
//-----------------------------------------------------------------------------
FUNCTION _ServerMonMonitor()
	INT 	i;
	WHILE 1 DO
		FOR i = 0 TO m_clusterCount - 1 DO
			m_clusterOnline[i] = _ServerMonScanServers(i);
			Sleep(0);
		END
		// idle for a while
		SleepMS(c_Monitor_Sacn_Interval);
	END
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonScanSite
//
//	SUMMARY:
//		Browse all servers in the site and then launch the monitoring task
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		N/A
//
//	REMARKS:
//		Background task, cannot be set to PRIVATE scope
//
//-----------------------------------------------------------------------------
FUNCTION _ServerMonScanSite()
	INT 	i;
	INT		numServers;
	STRING	sCluster;
	INT handle = ServerBrowseOpen()
	IF (handle = -1) THEN
		RETURN;
	END

	// populate the cluster name array
	numServers = ServerBrowseNumRecords(handle)
	ServerBrowseFirst(handle)
	FOR i = 1 TO numServers DO
		sCluster = ServerBrowseGetField(handle, "Cluster");
		_ServerMonClusterAdd (sCluster);
		IF i < numServers THEN
			ServerBrowseNext(handle)
		END
	END
	ServerBrowseClose(handle);

	// launch the background process
	TaskNew("_ServerMonMonitor", "", 8 + 2);
	
	ServerMonClusterSelect(0);
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonServerAdd
//
//	SUMMARY:
//		Browse all servers in the site and then launch the monitoring task
//
//	PARAMS:
//
//		handle		-	handle for the ServerBrowse*() functions
//		numIoServer	-	known number of I/O servers
//
//	RETURNS: 
//
//		known number of I/O servers which can be either
//		numIoServer if the server we added is not an I/O server
//		or numIoServer + 1 if it is an I/O server
//
//-----------------------------------------------------------------------------
PRIVATE
INT FUNCTION _ServerMonServerAdd(INT handle, INT numIoServer)
	STRING	sName = ServerBrowseGetField(handle, "Name");
	INT	serverIndex = _ServerMonStatusStringIndex(handle);
	IF serverIndex = c_RAT_SERVER_INDEX_SLOT THEN
		serverIndex = c_RAT_SERVER_INDEX_SLOT + numIoServer;
		numIoServer = numIoServer + 1;
	END
	m_serverName[serverIndex] = sName;
	RETURN numIoServer;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonStatusStringIndex
//
//	SUMMARY:
//		Calculate the type of the the server at the browse handle which
//		is used to make the index into the cluster status string
//
//	PARAMS:
//
//		handle		-	handle for the ServerBrowse*() functions
//
//	RETURNS: 
//
//		the internal server type offset for saving server name and 
//		online status of the server in the global data area
//
//-----------------------------------------------------------------------------
PRIVATE
INT FUNCTION _ServerMonStatusStringIndex(INT handle)
	STRING	sMode;
	INT		index;
	
	SELECT CASE ServerBrowseGetField(handle, "Type")
	CASE "I/O"
		RETURN c_IO_SERVER_BASE_INDEX;

	CASE "Report"
		index = 0;
	CASE "Trend"
		index = 2;
	CASE "Alarm"
		index = 4;
	CASE ELSE
		// error	
		RETURN c_IO_SERVER_BASE_INDEX;
	END SELECT

	sMode = ServerBrowseGetField(handle, "Mode");
	index = index + StrToInt(sMode);
	RETURN index;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonServerGetProperty
//
//	SUMMARY:
//		Get property value for the cluster.server on the server property page
//
//	PARAMS:
//
//		propertyName	-	ID of the property as supported by ServerGetProperty()
//
//	RETURNS: 
//
//		string value of the property
//
//-----------------------------------------------------------------------------
PRIVATE
STRING FUNCTION _ServerMonServerGetProperty(STRING propertyName)
	STRING  cluster = StrTrim(PageGetStr("cluster", hServerProperty));
	STRING  server = PageGetStr("server", hServerProperty);
	RETURN 	ServerGetProperty(server, propertyName, cluster);
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonStrUpdate
//
//	SUMMARY:
//		Update the page variables on the server property page using their
//		matching server property value
//
//	PARAMS:
//
//		propertyName	-	ID of the property as supported by ServerGetProperty()
//
//	RETURNS: 
//
//		N/A
//
//-----------------------------------------------------------------------------
PRIVATE
STRING FUNCTION _ServerMonStrUpdate(STRING propertyName)
	STRING propertyValue = _ServerMonServerGetProperty(propertyName);
	PageSetStr(propertyName, propertyValue, hServerProperty);
	RETURN propertyValue;
END

//-----------------------------------------------------------------------------
//
//	FUNCTION NAME:
//		_ServerMonPropertyPageUpdate
//
//	SUMMARY:
//		Update the page variables of the server properties page
//
//	PARAMS:
//
//		N/A
//
//	RETURNS: 
//
//		N/A
//
//	REMARKS:
//		Background task, cannot be set to PRIVATE scope
//
//-----------------------------------------------------------------------------
FUNCTION _ServerMonPropertyPageUpdate()
	STRING	syncState;
	INT		syncStatus;
	INT		syncProgress = 0;
	STRING	rdbDisk;
	STRING	rdbRAM;
	STRING	reloadStatus;
	STRING	rdbStatus;
	INT		serverReloadError = 0;
	WHILE 1 DO
		rdbRAM = _ServerMonStrUpdate("RDBMemTime");
		rdbDisk = _ServerMonStrUpdate("RDBDiskTime");
		reloadStatus = _ServerMonStrUpdate("ReloadStatus");
	
		// translate internal state into text string
		IF rdbRAM = rdbDisk THEN
			IF reloadStatus = "0" THEN
				rdbStatus = StrToLocalText("@(up to date)");
			ELSE
				rdbStatus = StrToLocalText("@(reload failed)");
			END
		ELSE
			rdbStatus = StrToLocalText("@(reload available)");
		END
		PageSetStr("RDB Status", rdbStatus, hServerProperty);
		
		SELECT CASE PageGetInt("type", hServerProperty)
		CASE c_SERVER_TYPE_REPORT
			syncState = StrToLocalText("@(Not applicable for report servers)");
		CASE c_SERVER_TYPE_ALARM, c_SERVER_TYPE_TREND
			serverReloadError = PageGetInt("reloadError");
			IF serverReloadError <> 0 THEN
				syncState = ErrMsg(serverReloadError);
			ELSE
				syncStatus = StrToInt(_ServerMonServerGetProperty("SyncStatus"));
				// Alarm or Trend server, no sync
				IF syncStatus = 0 THEN
					// Sync completed, so the sync progress is 100%
					syncState = StrToLocalText("@(Completed)");
					syncProgress = 100;
				ELSE 
					IF syncStatus = 1 THEN
						// Sync pending, either because there is no redundant server or sync has not started.
						syncState = StrToLocalText("@(Pending)");
						syncProgress = 0;
					ELSE
						syncProgress = StrToInt(_ServerMonServerGetProperty("SyncProgress"));
						syncState = IntToStr(syncProgress);
					END
				END
			END
		CASE ELSE
			syncState = StrToLocalText("@(Updating ...)");
		END	SELECT
		
		PageSetStr("syncState", syncState, hServerProperty);
		PageSetInt("syncProgress", syncProgress, hServerProperty);
		
		// idle for a while
		SleepMS(c_Monitor_Sacn_Interval);
	END
END
